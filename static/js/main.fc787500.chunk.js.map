{"version":3,"sources":["contexts/TodoContext.js","components/Items.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","initialItems","TodoProvider","props","useState","items","setItems","todoData","add","item","remove","index","copy","splice","Provider","value","useTodoContext","useContext","NewItem","text","setText","todoContext","className","type","placeholder","onChange","e","target","onClick","ItemList","map","i","Item","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNAGaA,EAAaC,0BAEpBC,EAAa,CAAC,cAAe,kBAGnC,SAASC,EAAaC,GAAQ,IAAD,EACCC,mBAASH,GADV,mBAClBI,EADkB,KACXC,EADW,KAYzB,IAAMC,EAAS,CAACF,QAAOG,IATvB,SAAaC,GACTH,EAAS,GAAD,mBAAKD,GAAL,CAAYI,MAQIC,OAL5B,SAAgBC,GACZ,IAAMC,EAAI,YAAOP,GACjBO,EAAKC,OAAOF,EAAO,GACnBL,EAASM,KAIb,OAAO,kBAACb,EAAYe,SAAb,eAAsBC,MAAOR,GAAcJ,IAGtD,SAASa,IACL,OAAOC,qBAAWlB,GCvBf,SAASmB,IAAU,IAAD,EACGd,mBAAS,IADZ,mBACde,EADc,KACRC,EADQ,KAIfC,EAAcL,IAEpB,OACI,yBAAKM,UAAU,QACX,2BAAOC,KAAK,OAAOC,YAAY,WAAWT,MAAQI,EAAOM,SAAU,SAAAC,GAAC,OAAIN,EAAQM,EAAEC,OAAOZ,UACzF,4BAAQa,QAAS,kBAAMP,EAAYb,IAAIW,KAAvC,QAIL,SAASU,IAEZ,IAAMR,EAAcL,IAEpB,OAAOK,EAAYhB,MAAMyB,KAAI,SAACrB,EAAMsB,GAAP,OAAa,kBAACC,EAAD,CAAMb,KAAMV,EAAME,MAAOoB,EAAGE,IAAKF,EAAGrB,OAAQW,EAAYX,YAE/F,SAASsB,EAAT,GAAuC,IAAvBb,EAAsB,EAAtBA,KAAMR,EAAgB,EAAhBA,MAAOD,EAAS,EAATA,OAChC,OACI,yBAAKY,UAAU,QACVX,EAAO,EADZ,IACgBQ,EACZ,0BAAMS,QAAS,kBAAIlB,EAAOC,KAA1B,S,MCPGuB,MAdf,WACE,OACI,kBAAChC,EAAD,KACF,yBAAKoB,UAAU,OACX,4BAAQA,UAAU,cACd,wCACI,kBAACJ,EAAD,MACA,kBAACW,EAAD,UCAIM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fc787500.chunk.js","sourcesContent":["import React, { createContext, useState, useContext } from 'react';\n\n// this is the context hook page\nexport const TodoContext= createContext();\n\nconst initialItems=[\"Wash dishes\", \"Do the dusting\"];\n\n//which will hold the state and provide methods to update the state\nfunction TodoProvider(props) {\n    const [items, setItems] = useState(initialItems);\n\n    function add(item) {\n        setItems([...items, item]); // die puntjes dat was zo'n verkorte notatie zo van \"dat kan vanalles zijn dat ervoor komt\"\n    }\n\n    function remove(index) {\n        const copy = [...items];\n        copy.splice(index, 1); // op de index gooi er eentje weg\n        setItems(copy);\n    }\n    const todoData={items, add, remove};\n\n    return <TodoContext.Provider value={todoData} {...props} />;\n}\n//Here we create a custom hook that allows us to consume the todo context\nfunction useTodoContext(){\n    return useContext(TodoContext);\n}\nexport { TodoProvider, useTodoContext };","import React, { useState } from \"react\";\nimport { useTodoContext } from \"../contexts/TodoContext\";\n\nexport function NewItem(){\n    const [text, setText] = useState(\"\");\n\n    // todoContext containe a selfmade hook\n    const todoContext = useTodoContext();\n\n    return(\n        <div className=\"Item\">\n            <input type=\"text\" placeholder=\"New Task\" value={ text } onChange={e => setText(e.target.value)}></input>\n            <button onClick={() => todoContext.add(text)}>Add</button>\n        </div>\n    );\n}\nexport function ItemList(){\n    // TodoContext is made available as a hook\n    const todoContext = useTodoContext();\n\n    return todoContext.items.map((item, i) => <Item text={item} index={i} key={i} remove={todoContext.remove} />);\n}\nexport function Item({ text, index, remove }){\n    return(\n        <div className=\"Item\">\n            {index +1} {text}\n            <span onClick={()=>remove(index)}>Done</span>\n        </div>\n    )\n}\n","import React from 'react';\nimport { ItemList, NewItem } from \"./components/Items\";\nimport { TodoProvider } from \"./contexts/TodoContext\"; // import the context here to load with the values\nimport './App.css';\n\nfunction App() {\n  return (\n      <TodoProvider>\n    <div className=\"App\">\n        <header className=\"App-header\">\n            <h2>ToDo App</h2>\n                <NewItem />\n                <ItemList />\n        </header>\n    </div>\n      </TodoProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}